{"version":3,"sources":["assets/game-loop/game-loop.js","assets/game-loop/index.js","assets/collider/collider.js","assets/collider/index.js","assets/play-field/player/player.js","assets/play-field/player/index.js","assets/play-field/ball/ball.js","assets/play-field/ball/index.js","assets/play-field/scoreboard/scoreboard.js","assets/play-field/scoreboard/index.js","assets/play-field/index.js","index.js"],"names":["GameLoop","doesBoxesOverlap","hitboxA","hitboxB","topLeft","x","bottomRight","y","calculateOneCollision","A","B","objectA","objectB","onCollision","call","calculateCollisions","hitboxes","inverseHitboxes","slice","reverse","i","length","pop","j","canvas","game","getRender","getContext","drawPipeline","updatePipeline","runLoop","lastExecutionTime","reduce","onFixedUpdate","object","currentObjectHitbox","forEach","onDraw","currentExecutionTime","Date","now","setTimeout","addToDrawPipeline","push","addToUpdatePipeline","addObjectsToPipeline","objects","bind","onSetup","Collider","width","height","Player","initialY","initialX","side","upKey","downKey","document","addEventListener","event","key","move","includes","screenMargin","left","right","getBox","direction","dir","reset","render","fillStyle","fillRect","Ball","initialPosition","ySpeed","goingRight","invertYDirection","other","box","otherCenterY","beginPath","arc","Math","PI","fill","Scoreboard","fontSize","board","score","incrementScore","font","Object","keys","fillText","gameLoop","scoreboard","playerL","playerR","ball","declareWinner","winner","playerLWinningArea","playerRWinningArea","getElementById","drawBackground","window"],"mappings":"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","file":"src.e7093056.js","sourceRoot":"../src","sourcesContent":["function doesBoxesOverlap(hitboxA, hitboxB) {\n  if (hitboxA.topLeft.x > hitboxB.bottomRight.x\n    || hitboxB.topLeft.x > hitboxA.bottomRight.x) {\n    return false;\n  }\n\n  if (hitboxA.topLeft.y > hitboxB.bottomRight.y\n    || hitboxB.topLeft.y > hitboxA.bottomRight.y) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction calculateOneCollision(A, B) {\n  const [hitboxA, objectA] = A;\n  const [hitboxB, objectB] = B;\n\n  if (doesBoxesOverlap(hitboxA, hitboxB)) {\n    if (typeof objectA.onCollision === 'function') {\n      objectA.onCollision.call(objectA, objectB);\n    }\n\n    if (typeof objectB.onCollision === 'function') {\n      objectB.onCollision.call(objectB, objectA);\n    }\n  }\n}\n\nfunction calculateCollisions(hitboxes) {\n  const inverseHitboxes = hitboxes.slice().reverse();\n\n  for (let i = 0; i < hitboxes.length; i += 1) {\n    inverseHitboxes.pop();\n\n    for (let j = 0; j < inverseHitboxes.length; j += 1) {\n      calculateOneCollision(\n        hitboxes[i],\n        inverseHitboxes[j],\n      );\n    }\n  }\n}\n\nfunction GameLoop(canvas) {\n  // Initialize values\n  const game = canvas;\n  game.getRender = () => canvas.getContext('2d');\n\n  // Draw functions\n  const drawPipeline = [];\n  const drawEverything = () => drawPipeline.forEach((onDraw) => onDraw(game));\n\n  // update functions\n  const updatePipeline = [];\n  const updateEverthing = () => updatePipeline.reduce((hitboxes, [onFixedUpdate, object]) => {\n    const currentObjectHitbox = onFixedUpdate(game);\n\n    if (!currentObjectHitbox) return hitboxes;\n\n    return [...hitboxes, [currentObjectHitbox, object]];\n  }, []);\n\n  // Game loop\n  const runLoop = (lastExecutionTime) => {\n    const hitboxes = updateEverthing();\n    calculateCollisions(hitboxes);\n\n    drawEverything();\n\n    // calculate delay to next tick\n    const currentExecutionTime = Date.now();\n    const executionDelta = currentExecutionTime - lastExecutionTime;\n\n    const desiredUpdateRate = 1000 / 60;\n    const millisecondsToNextGameTick = desiredUpdateRate - executionDelta;\n\n    // call next tick\n    setTimeout(() => runLoop(currentExecutionTime), millisecondsToNextGameTick);\n  };\n  runLoop(Date.now());\n\n  // Public API\n  this.addToDrawPipeline = function addToDrawPipeline(onDraw) {\n    drawPipeline.push(onDraw);\n  };\n\n  this.addToUpdatePipeline = function addToUpdatePipeline(onFixedUpdate, object) {\n    updatePipeline.push([onFixedUpdate, object]);\n  };\n\n  this.addObjectsToPipeline = (...objects) => {\n    objects.forEach((object) => {\n      if (typeof object.onDraw === 'function') {\n        this.addToDrawPipeline(object.onDraw.bind(object));\n      }\n\n      if (typeof object.onFixedUpdate === 'function') {\n        this.addToUpdatePipeline(object.onFixedUpdate.bind(object), object);\n      }\n\n      if (typeof object.onSetup === 'function') {\n        object.onSetup.call(object, game);\n      }\n    });\n  };\n}\n\nexport default GameLoop;\n","export { default } from './game-loop';\n","function Collider({\n  x, y, width, height, onCollision,\n}) {\n  this.onFixedUpdate = () => ({\n    topLeft: { x, y },\n    bottomRight: { x: x + width, y: y + height },\n  });\n\n  this.onCollision = onCollision;\n}\n\nexport default Collider;\n","export { default } from './collider';\n","function Player({\n  initialY,\n  initialX,\n  side,\n  upKey,\n  downKey,\n}) {\n  document.addEventListener('keydown', (event) => {\n    if (event.key === upKey) {\n      this.move('up');\n    } else if (event.key === downKey) {\n      this.move('down');\n    }\n  });\n\n  document.addEventListener('keyup', (event) => {\n    if ([upKey, downKey].includes(event.key)) {\n      this.move('idle');\n    }\n  });\n\n  const screenMargin = 3; // offset from screen edge\n  const ySpeed = 3.4;\n  const width = 10;\n  const height = 100;\n\n  const startingX = {\n    left: initialX + screenMargin,\n    right: initialX - width - screenMargin,\n  };\n\n  const x = startingX[side];\n  let y = initialY - height / 2;\n\n  this.getBox = () => ({\n    x, y, height, width,\n  });\n\n  /**\n   * Represents the direction the player is going.\n   * If value is:\n   *  1: it moves up, towards the top of the screen\n   *  0: it stays idle, don't move\n   * -1: it moves down, towards the bottom of the screen\n   * @type Number\n   */\n  let direction = 0;\n\n  this.move = (dir) => {\n    if (dir === 'up') {\n      direction = 1;\n    } else if (dir === 'down') {\n      direction = -1;\n    } else {\n      direction = 0;\n    }\n  };\n\n  this.reset = () => {\n    y = initialY - height / 2;\n    direction = 0;\n  };\n\n  this.onFixedUpdate = (game) => {\n    if (direction === 1 && y + ySpeed > 0) {\n      y -= ySpeed;\n    } else if (direction === -1 && y + height + ySpeed < game.height) {\n      y += ySpeed;\n    }\n\n    return {\n      topLeft: { x, y },\n      bottomRight: { x: x + width, y: y + height },\n    };\n  };\n\n  this.onDraw = (game) => {\n    const render = game.getRender();\n\n    render.fillStyle = 'white';\n    render.fillRect(x, y, width, height);\n  };\n}\n\nexport default Player;\n","export { default } from './player';\n","import Player from '../player';\n\nfunction Ball({ initialX, initialY }) {\n  const ballRadius = 6;\n  const initialPosition = {\n    x: initialX,\n    y: initialY,\n  };\n\n  const xSpeed = 6;\n  let ySpeed = 0;\n  let goingRight = true;\n  let { x, y } = initialPosition;\n\n  this.reset = () => {\n    x = initialPosition.x;\n    y = initialPosition.y;\n    ySpeed = 0;\n    goingRight = !goingRight;\n  };\n\n  this.invertYDirection = () => {\n    ySpeed *= -1;\n  };\n\n  this.onFixedUpdate = (game) => {\n    y += ySpeed;\n    if (y <= 0 || y >= game.height) {\n      this.invertYDirection();\n    }\n\n    if (goingRight) {\n      x += xSpeed;\n    } else {\n      x -= xSpeed;\n    }\n\n    return {\n      topLeft: { x: x - ballRadius, y: y - ballRadius },\n      bottomRight: { x: x + ballRadius, y: y + ballRadius },\n    };\n  };\n\n  this.onCollision = (other) => {\n    if (!(other instanceof Player)) {\n      return;\n    }\n\n    const box = other.getBox();\n    const otherCenterY = box.y + box.height / 2;\n\n    ySpeed = (y - otherCenterY) / 10;\n\n    goingRight = !goingRight;\n  };\n\n  this.onDraw = (game) => {\n    const render = game.getRender();\n\n    render.fillStyle = 'white';\n    render.beginPath();\n    render.arc(x, y, ballRadius, 0, 2 * Math.PI);\n    render.fill();\n  };\n}\n\nexport default Ball;\n","export { default } from './ball';\n","function Scoreboard() {\n  const fontSize = 35;\n  const yPosition = 3 + fontSize;\n\n  const board = {\n    left: { score: 0 },\n    right: { score: 0 },\n  };\n\n  this.incrementScore = (side) => {\n    board[side].score += 1;\n  };\n\n  this.onDraw = (game) => {\n    const render = game.getRender();\n\n    render.fillStyle = 'white';\n    render.font = `${fontSize}px Arial`;\n\n    Object.keys(board).forEach((side) => {\n      const { score } = board[side];\n      const x = game.width * (side === 'left' ? 1 / 6 : 4 / 6);\n\n      render.fillText(score, x, yPosition);\n    });\n  };\n}\n\nexport default Scoreboard;\n","export { default } from './scoreboard';\n","import Collider from '../collider';\nimport Ball from './ball';\nimport Player from './player';\nimport Scoreboard from './scoreboard';\n\nexport default (gameLoop, canvas) => {\n  const scoreboard = new Scoreboard();\n\n  const playerL = new Player({\n    initialX: 0,\n    initialY: canvas.height / 2,\n    side: 'left',\n    upKey: 'w',\n    downKey: 's',\n  });\n\n  const playerR = new Player({\n    initialX: canvas.width,\n    initialY: canvas.height / 2,\n    side: 'right',\n    upKey: 'ArrowUp',\n    downKey: 'ArrowDown',\n  });\n\n  const ball = new Ball({\n    initialX: canvas.width / 2,\n    initialY: canvas.height / 2,\n  });\n\n  const declareWinner = (winner) => {\n    ball.reset();\n    playerL.reset();\n    playerR.reset();\n    scoreboard.incrementScore(winner);\n  };\n\n  const playerLWinningArea = new Collider({\n    x: canvas.width,\n    y: 0,\n    height: canvas.height,\n    width: 100,\n    onCollision: () => declareWinner('left'),\n  });\n\n  const playerRWinningArea = new Collider({\n    x: -100,\n    y: 0,\n    height: canvas.height,\n    width: 100,\n    onCollision: () => declareWinner('right'),\n  });\n\n  gameLoop.addObjectsToPipeline(\n    ball,\n    playerL,\n    playerLWinningArea,\n    playerR,\n    playerRWinningArea,\n    scoreboard,\n  );\n};\n","import GameLoop from './assets/game-loop';\nimport playField from './assets/play-field';\n\nconst canvas = document.getElementById('game');\ncanvas.width = 800 * 1.3;\ncanvas.height = 450 * 1.3;\n\nfunction drawBackground(game) {\n  const { width, height } = game;\n  const render = game.getRender();\n\n  render.fillStyle = 'black';\n  render.fillRect(0, 0, width, height);\n}\n\nconst gameLoop = new GameLoop(canvas);\ngameLoop.addToDrawPipeline(drawBackground);\n\nplayField(gameLoop, canvas);\n\nwindow.gameLoop = gameLoop;\n"]}